package equipment;

import javax.xml.parsers.DocumentBuilderFactory; // Related to HTML file doc parsing
import javax.xml.parsers.DocumentBuilder; 
import org.w3c.dom.Document; 
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;


public class EquipItem {
	
	// hold - dtypes from project desc. 	String [] dataNames = {"rdf:ID","nominalvalue","name","region_rdf:ID","substation_rdf:ID","baseVoltage_rdf:ID","maxP","minP",
//	"equipmentContainer_rdf:ID","ratedS","P","Q","genUnit_rdf:ID","regControl_rdf:ID","targetValue","Transformer.r","Transformer.x",
//	"Transformer_rdf:ID","state","step"}; //data types

	

	String [] data; //actual data for object
	Node item; //passed node from db builder
	int type; //passed type of object. known from search. 	
	
	
	
	public EquipItem(Node item, int type) {

		this.item = item; //passed node
		this.type = type; //passed type

		
		String [] equipNames = {"BaseVoltage","Substation", "VoltageLevel", "GeneratingUnit", "SynchronousMachine", "RegulatingControl", 
				"PowerTransformer", "EnergyConsumer", "PowerTransformerEnd", "Breaker", "RatioTapChanger"}; //equipment types 

		// data types
		String [] dataNames= {"rdf:ID", //0
				equipNames[type]+"."+"nominalVoltage", //1
				"IdentifiedObject.name", //2
				equipNames[type]+"."+"maxOperatingP", //3 
				equipNames[type]+"."+"minOperatingP", //4
				"ratedS", //6
				"P", //7
				"Q", //8
				"targetValue", //9
				"Transformer.r", //10
				"Transformer.x", //11
				"state", //12
				"step", //13
				equipNames[type]+"."+"Region", //14
				equipNames[type]+"."+"substation_rdf:ID", //15
				equipNames[type]+"."+"baseVoltage_rdf:ID", //16
				"Equipment.EquipmentContainer", //5
				"genUnit_rdf:ID", //17
				"regControl_rdf:ID", //18
				"Transformer_rdf:ID"}; //19 
		
		// Hash table of date required for each type
		int [][] dataIndex= {{0, 1}, 	// BaseVoltage							
				{0,	2,	13},				// Substation					
				{0,	2,	14,	15},			// VoltageLevel				
				{0,	2,	3,	4,	16},		// Gen Unit		
				{0,	2,	5,	6,	7,	17,	18,	16,	15}, // SynchMachine
				{0,	2,	14},				// Reg Control			
				{0,	2,	16},				// Power Tx		
				{0,	2,	6,	7,	16,	15},	// Energy Con		
				{0,	2,	9,	10,	19,	15},	// Power Tx End 		
				{0,	2,	11,	16,	15},		// Breaker		
				{0,	2,	12}}; 				// Ratio Tap Changer
		
		data = new String[dataIndex[type].length]; //init the string size based on type
		String dataNameHold = ""; //hold term for search string. used in exception handling /debugging
		
		Element element2;
		
		try {
		
			Element element = (Element) item; //need to cast the node back to element to restore the attributes		
			data [0] = element.getAttribute("rdf:ID"); // all items have rdf:ID 
			
			for (int i=1; i<dataIndex[type].length;i++) {
				dataNameHold = "cim:"+dataNames[dataIndex[type][i]];
				if (i<2){
					data[i] = element.getElementsByTagName(dataNameHold).item(0).getFirstChild().getNodeValue(); //the text gets stored as a node as well in DOM. Need to getElements by tag name
				}
				else {
					element2 = (Element) element.getElementsByTagName(dataNameHold).item(0);
					data[i] = element2.getAttribute("rdf:resource");
					//System.out.println(data[i]);
				}
					
				
				//getElementsByTagName(dataNameHold).item(0).getFirstChild().getNodeValue();
				System.out.println(data[i]);
			}
		}
		catch (NullPointerException e){
		
			System.out.println("Error - search term doesn't exist: "+dataNameHold);
			e.printStackTrace();
		}
		
	}
	
}
